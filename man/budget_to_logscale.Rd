% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/configure_smashy.R
\name{budget_to_logscale}
\alias{budget_to_logscale}
\title{Put Budget-Parameter on Logarithmic Scale}
\usage{
budget_to_logscale(search_space)
}
\arguments{
\item{search_space}{(\code{\link[paradox:ParamSet]{ParamSet}})\cr
Search space to modify. The input is not modified in-place and is cloned instead.}
}
\value{
\code{\link[paradox:ParamSet]{ParamSet}}: The search space with the \code{"budget"}-tagged
component on a log-scale.
}
\description{
Set the search space component that is tagged as \code{"budget"} to log-scale.

Smashy operates on a log-scale internally, so the budget of the search space
must also be on a log-scale, and should be transformed (through exponentiation)
by the \verb{$trafo()} function of the \code{\link[paradox:ParamSet]{ParamSet}}.

\code{budget_to_logscale()} does this automatically: It takes a \code{\link[paradox:ParamSet]{ParamSet}}
with unscaled budget (e.g. number of deep learning epochs, or timeout), and returns a
\code{\link[paradox:ParamSet]{ParamSet}} where this configuration parameter is replaced by another
configuration parameter with \code{lower} and \code{upper} bounds replaced by the \code{log()} of the
original bounds. Furthermore, the \verb{$trafo()} is adjusted to include exponentiation of
the budget. Another \verb{$trafo()} function may be present, the exponentiation of the budget
parameter is then followed by a call to the original \verb{$trafo()}.
}
\examples{

search_space = ps(
  b = p_int(1, 100, tags = "budget")
)

ss_t = budget_to_logscale(search_space)

library("data.table")
d = Design$new(ss_t, data.table(b = log(c(1, 10, 100))), FALSE)

d

d$transpose()
}
\seealso{
Other smashy configuration functions: 
\code{\link{configure_smashy}()},
\code{\link{smashy_as_bohb}()},
\code{\link{smashy_as_hyperband}()}
}
\concept{smashy configuration functions}
