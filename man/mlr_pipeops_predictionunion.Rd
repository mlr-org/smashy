% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpPredictionUnion.R
\name{mlr_pipeops_predictionunion}
\alias{mlr_pipeops_predictionunion}
\alias{PipeOpPredictionUnion}
\title{Combine Predictions Row-Wise.}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.
}
\description{
Combine \code{\link[mlr3:Prediction]{Prediction}}\verb{ made for different subsets of a [}Task\verb{][mlr3::Task] into a combined [}Prediction`]\link[mlr3:Prediction]{mlr3::Prediction}.
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpPredictionUnion$new(id = "predictionunion", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{innum} :: \code{numeric(1)} | \code{character}\cr
Determines the number of input channels.
If \code{innum} is 0 (default), a vararg input channel is created that can take an arbitrary number
of inputs. If \code{innum} is a \code{character} vector, the number of input channels is the length of
\code{innum}, and the columns of the result are prefixed with the values.
\item \code{collect_multiplicity} :: \code{logical(1)}\cr
If \code{TRUE}, the input is a \code{\link{Multiplicity}} collecting channel. This means, a
\code{\link{Multiplicity}} input, instead of multiple normal inputs, is accepted and the members are aggregated. This requires \code{innum} to be 0.
Default is \code{FALSE}.
\item \code{id} :: \code{character(1)}
Identifier of the resulting object, default \code{"predictionunion"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpPredictionUnion}} has multiple input channels depending on the \code{innum} construction
argument, named \code{"input1"}, \code{"input2"}, ... if \code{innum} is nonzero; if \code{innum} is 0, there is
only one \emph{vararg} input channel named \code{"..."}. All input channels take \code{NULL} during training and a \code{\link[mlr3:Prediction]{Prediction}}
object during prediction.

\code{\link{PipeOpPredictionUnion}} has one output channel named \code{"output"}, producing \code{NULL} during training and a \code{\link[mlr3:Prediction]{Prediction}}
object during prediction.

The output is a \code{\link[mlr3:Prediction]{Prediction}} constructed by \code{c()}ing (effectively \code{rbind}-ing) all \code{\link[mlr3:Prediction]{Prediction}}s during prediction.
}

\section{State}{

The \verb{$state} is left empty (\code{list()}).
}

\section{Parameters}{

\code{\link{PipeOpPredictionUnion}} has no parameters.
}

\section{Internals}{

\code{\link{PipeOpPredictionUnion}} uses the \code{\link[mlr3:Prediction]{Prediction}} S3 \code{c()} method provided by \code{mlr3}.
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.


Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.


Only methods inherited from \code{\link{PipeOp}}.
}

\seealso{
https://mlr3book.mlr-org.com/list-pipeops.html

https://mlr3book.mlr-org.com/list-pipeops.html

Other PipeOps: 
\code{\link{mlr_pipeops_densityratio}},
\code{\link{mlr_pipeops_densitysplit}},
\code{\link{mlr_pipeops_stratify}}

Other Multiplicity PipeOps: 
\code{\link{mlr_pipeops_stratify}}

Other PipeOps: 
\code{\link{mlr_pipeops_densityratio}},
\code{\link{mlr_pipeops_densitysplit}},
\code{\link{mlr_pipeops_stratify}}

Other Multiplicity PipeOps: 
\code{\link{mlr_pipeops_stratify}}

Other Experimental Features: 
\code{\link{mlr_pipeops_stratify}}
}
\concept{Experimental Features}
\concept{Multiplicity PipeOps}
\concept{PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpPredictionUnion}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpPredictionUnion-new}{\code{PipeOpPredictionUnion$new()}}
\item \href{#method-PipeOpPredictionUnion-clone}{\code{PipeOpPredictionUnion$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpPredictionUnion-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpPredictionUnion-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpPredictionUnion$new(
  innum = 0L,
  collect_multiplicity = FALSE,
  id = "predictionunion",
  param_vals = list()
)}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpPredictionUnion-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpPredictionUnion-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpPredictionUnion$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
