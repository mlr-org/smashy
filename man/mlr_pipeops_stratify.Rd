% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpStratify.R
\name{mlr_pipeops_stratify}
\alias{mlr_pipeops_stratify}
\alias{PipeOpStratify}
\title{Stratify Training by Feature}
\format{
\code{\link{R6Class}} object inheriting from \code{\link{PipeOp}}.
}
\description{
Subset the input as a \code{\link{Multiplicity}}, causing subsequent \code{\link{PipeOp}}s to be executed independently
for each stratum according to \code{stratify_feature}.

\verb{# TODO: missing: 'build only the model with the highest stratify param value'}
}
\section{Construction}{


\if{html}{\out{<div class="sourceCode">}}\preformatted{PipeOpStratify$new(id = "stratify", param_vals = list())
}\if{html}{\out{</div>}}
\itemize{
\item \code{id} :: \code{character(1)}
Identifier of the resulting object, default \code{"stratify"}.
\item \code{param_vals} :: named \code{list}\cr
List of hyperparameter settings, overwriting the hyperparameter settings that would otherwise
be set during construction. Default \code{list()}.
}
}

\section{Input and Output Channels}{

\code{\link{PipeOpStratify}} has one input channel named \code{"input"}, taking a \code{\link[mlr3:Task]{Task}}, both during training and prediction.

\code{\link{PipeOpStratify}} has two output channels; one named \code{"output"}, returning \code{\link[mlr3:Task]{Task}} subsets as a
\code{\link{Multiplicity}} during training and prediction; and one named \code{"fallback"}, containing the whole \code{\link[mlr3:Task]{Task}}
during training and the subset of the input \code{\link[mlr3:Task]{Task}} that doesn't fit any stratum during prediction.
}

\section{State}{

The \verb{$state} is a named \code{list} with the following entries:
\itemize{
\item \code{stratify_values} :: \code{any}\cr
Vector indicating the values of features by which
}
}

\section{Parameters}{

\itemize{
\item \code{stratify_feature} :: \code{character(1)}\cr
Name of the feature to stratify by.
\item \code{min_size} :: \code{integer(1)}\cr
Minimum number of samples for a stratification level so that a model gets trained. Initializedto 1.
\item \code{predict_choice} :: \code{character(1)}\cr
How to choose the model with which to make predictions. \code{"exact"}: only model with exactly matching
stratification value used. \code{"exact_or_greater"}: if exact model was not trained, take the
model with next higher stratify value. \code{"exact_or_less"}: if exact model was not trained, take the
model with the next lower stratify value. \code{"nearest"}: Take the model with nearest stratify value,
whether lower or higher. Initialized to \code{"exact"}.\cr
Whenever a model with exact / greater / smaller / any stratify value is not present, the "fallback"
model is used.
}
}

\section{Fields}{

Only fields inherited from \code{\link{PipeOp}}.
}

\section{Methods}{

Only methods inherited from \code{\link{PipeOp}}.
}

\seealso{
https://mlr3book.mlr-org.com/list-pipeops.html

Other PipeOps: 
\code{\link{mlr_pipeops_densityratio}},
\code{\link{mlr_pipeops_densitysplit}},
\code{\link{mlr_pipeops_predictionunion}}

Other Multiplicity PipeOps: 
\code{\link{mlr_pipeops_predictionunion}}

Other Experimental Features: 
\code{\link{mlr_pipeops_predictionunion}}
}
\concept{Experimental Features}
\concept{Multiplicity PipeOps}
\concept{PipeOps}
\section{Super class}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{PipeOpStratify}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpStratify-new}{\code{PipeOpStratify$new()}}
\item \href{#method-PipeOpStratify-clone}{\code{PipeOpStratify$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpStratify-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpStratify-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpStratify$new(id = "stratify", param_vals = list())}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpStratify-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpStratify-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpStratify$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
